# OpenResty 学习示例
# https://moonbingbing.gitbooks.io/openresty-best-practices/content/openresty/helloworld.html
# openresty -p ~/wwwroot/php.dev/jingplus/samples/openresty -c ~/wwwroot/php.dev/jingplus/samples/openresty/conf/nginx.conf
# openresty -p ~/wwwroot/php.dev/jingplus/samples/openresty -c ~/wwwroot/php.dev/jingplus/samples/openresty/conf/nginx.conf -s stop
# restydoc -s ngx.exit
# opm search http
# opm get ledgetech/lua-resty-http
# opm remove ledgetech/lua-resty-http

worker_processes  1;        #nginx worker 数量
error_log logs/error.log;   #指定错误日志文件路径
events {
    worker_connections 1024;
}

http {

    # 设置默认 lua 搜索路径，添加 lua 路径
    # 此处写相对路径时，对启动 nginx 的路径有要求，必须在 nginx 目录下启动，require 找不到
    # comm.param 绝对路径当然也没问题，但是不可移植，因此应使用变量 $prefix 或
    # ${prefix}，OR 会替换为 nginx 的 prefix path
    # Sets the Lua module search path used by scripts specified by
    # set_by_lua, content_by_lua and others. The path string is in standard
    # Lua path form, and ";;" can be used to stand for the original search
    # paths.
    #lua_package_path '$prefix/lua/?.lua;$prefix/lua/?/?.lua;/usr/local/Cellar/openresty/1.15.8.1/site/lualib/resty/?.lua;;';
    lua_package_path '$prefix/lua/?.lua;$prefix/lua/?/?.lua;;';

    # 这里设置为 off，是为了避免每次修改之后都要重新 reload 的麻烦。
    # 在生产环境上务必确保 lua_code_cache 设置成 on。
    lua_code_cache on;

    # 设置共享内存
    lua_shared_dict my_cache 128m;
    # 注意 limit_conn_store 的大小需要足够放置限流所需的键值。
    # 每个 $binary_remote_addr 大小不会超过 16 字节(IPv6 情况下)，算上 lua_shared_dict 的节点大小，总共不到 64 字节。
    # 100M 可以放 1.6M 个键值对
    lua_shared_dict limit_conn_store 100M;
    lua_shared_dict limit_req_store 100M;

    # this runs before forking out nginx worker processes:
    init_by_lua_block {
        local iputils = require("resty.iputils")
        iputils.enable_lrucache()

        -- WARNING: Global variable, recommend this is cached at the module level
        -- https://github.com/openresty/lua-nginx-module#data-sharing-within-an-nginx-worker
        
        -- local whitelist_ips = {}
        -- whitelist = iputils.parse_cidrs(whitelist_ips)
        local ips = require "ips"
        whitelist = iputils.parse_cidrs(ips.get_ips())
        -- print(table.concat(ips.get_ips(), ';'))
    }

    server {
        listen 6699;

        # 默认读取 body
        #lua_need_request_body on;

        error_log logs/error.log info; # 日志级别

        location / {
            default_type text/html;

            #content_by_lua_block {
            #    ngx.say("HelloWorld")
            #}
            content_by_lua_file lua/index.lua;
        }

        # 与其他 location 配合
        # https://moonbingbing.gitbooks.io/openresty-best-practices/content/openresty/work_with_location.html
        location /sum {
            internal; # 仅允许内部调用
            content_by_lua_block {
                local args = ngx.req.get_uri_args()
                ngx.say(tonumber(args.a) + tonumber(args.b))
            }
        }
        location /app/sum {
            content_by_lua_block {
                local res = ngx.location.capture('/sum', {args={a=1, b=2}})
                ngx.say('status:', res.status, 'response:', res.body)
            }
        }
        # 并行请求
        location /internal/sum {
            internal;
            content_by_lua_block {
                ngx.sleep(0.5)
                local args = ngx.req.get_uri_args()
                ngx.say(tonumber(args.a) + tonumber(args.b))
            }
        }
        location /internal/sub {
            internal;
            content_by_lua_block {
                ngx.sleep(0.5)
                local args = ngx.req.get_uri_args()
                ngx.say(tonumber(args.a) - tonumber(args.b))
            }
        }
        location /app/parallels {
            content_by_lua_block {
                local start_time = ngx.now()
                local res1, res2 = ngx.location.capture_multi({
                    {'/internal/sum', {args={a=1, b=2}}},
                    {'/internal/sub', {args={a=5, b=2}}}
                })
                ngx.say('status:', res1.status, 'response:', res1.body)
                ngx.say('status:', res2.status, 'response:', res2.body)
                ngx.say('time:', ngx.now() - start_time)
            }
        }
        # 获取 uri 参数
        # https://moonbingbing.gitbooks.io/openresty-best-practices/content/openresty/get_url_param.html
        location /print_param {
            content_by_lua_block {
                local args = ngx.req.get_uri_args()
                for k,v in pairs(args) do
                    ngx.say("[GET ] key:", k, " value: ", v)
                end
                
                -- 解析 body 参数之前一定要先读取 body
                -- 如果只是某些接口需要读取 body(非全局行为), 填写以下指令, 全局的话可以在最上面开启 lua_need_request_body on;
                ngx.req.read_body() 

                local args = ngx.req.get_post_args()
                for k,v in pairs(args) do
                    ngx.say("[POST] key:", k, " value: ", v)
                end
            }
        }
        location /app/args {
            content_by_lua_block {
                local res = ngx.location.capture(
                    '/print_params',
                    {
                        method = ngx.HTTP_POST,
                        args = ngx.encode_args({name = 'jingwentian', age = 18}),
                        body = ngx.encode_args({hobby = 'sleep', from = 'china'})
                    }
                )
                ngx.say('status:', res.status, 'body:', res.body)
            }
        }

        # 输出响应体
        # https://moonbingbing.gitbooks.io/openresty-best-practices/content/openresty/response.html
        location /app/ngx_say {
            content_by_lua_block {
                -- 请求 3s 后一起接收到响应体
                --[[
                ngx.say('hello')
                ngx.sleep(3)
                ngx.say('world')
                --]]
                
                ngx.say('hello')
                ngx.flush()
                ngx.sleep(3)
                ngx.say('world')
            }
        }
        location /app/chunk {
            content_by_lua_block {
                -- ngx.say(ngx.config.prefix())
                -- 可以利用 CHUNKED 格式，把一个大的响应体拆分成多个小的应答体，分批、有节制的响应给请求方

                local file, err = io.open(ngx.config.prefix() .. "logs/error.log","r")
                if not file then
                    ngx.log(ngx.ERR, "open file error:", err)
                    ngx.exit(ngx.HTTP_SERVICE_UNAVAILABLE)
                end

                -- 按块读取本地文件内容（每次 1KB），并以流式方式进行响应
                local data
                while true do
                    data = file:read(1024)
                    if nil == data then
                        break
                    end 
                    ngx.print(data)
                    ngx.flush(true)
                end
                file:close()
            }
        }

        # 日志输出
        # https://moonbingbing.gitbooks.io/openresty-best-practices/content/openresty/log_response.html
        location /app/log {
            content_by_lua_block {
                local num = 999
                local string = "hello world"
                local table = {
                    name = 'jingwentian',
                    age = 18
                }

                ngx.log(ngx.ERR, "num:", num)
                ngx.log(ngx.INFO, "string:", string)
                -- print(table)

                --[[
                ngx.STDERR     -- 标准输出
                ngx.EMERG      -- 紧急报错
                ngx.ALERT      -- 报警
                ngx.CRIT       -- 严重，系统故障，触发运维告警系统
                ngx.ERR        -- 错误，业务不可恢复性错误
                ngx.WARN       -- 告警，业务中可忽略错误
                ngx.NOTICE     -- 提醒，业务比较重要信息
                ngx.INFO       -- 信息，业务琐碎日志信息，包含不同情况判断等
                ngx.DEBUG      -- 调试  
                --]]
            }
        }

        # 简单API Server框架
        # https://moonbingbing.gitbooks.io/openresty-best-practices/content/openresty/simple_api.html
        location ~ ^/app/api/([-_a-zA-Z0-9/]+) {
            # 准入阶段完成参数验证
            access_by_lua_file  lua/demo/access_check.lua;
            #内容生成阶段
            content_by_lua_file lua/demo/$1.lua;
        }

        # 使用 Nginx 内置绑定变量
        # https://moonbingbing.gitbooks.io/openresty-best-practices/content/openresty/inline_var.html
        location /app/v2/sum {
            # 使用access阶段完成准入阶段处理
            access_by_lua_block {
                -- ngx.say(ngx.var.remote_addr)
                local black_ips = {["127.0.0.1"] = true}
                local ip = ngx.var.remote_addr
                if true == black_ips[ip] then
                    ngx.exit(ngx.HTTP_FORBIDDEN)
                end
            }

            #处理业务
            content_by_lua_block {
                local a = tonumber(ngx.var.arg_a) or 0
                local b = tonumber(ngx.var.arg_b) or 0

                ngx.say("sum: ", a + b)
            }
        }
        location /app/download {
            access_by_lua_block {
                -- 传输速率限制
                ngx.var.limit_rate = 1000
            }
        }

        # 不同阶段共享变量
        # https://moonbingbing.gitbooks.io/openresty-best-practices/content/openresty/share_var.html
        location /app/context {
            # 可以通过共享内存的方式完成不同工作进程的数据共享
            # ngx.ctx 是一个表，所以我们可以对他添加、修改

            rewrite_by_lua_block {
                ngx.ctx.foo = 6
            }
            access_by_lua_block {
                ngx.ctx.foo = ngx.ctx.foo + 6
            }
            content_by_lua_block {
                ngx.say(ngx.ctx.foo)
            }
        }
        # 额外注意，每个请求，包括子请求，都有一份自己的 ngx.ctx 表
        location /app/context/sub {
            content_by_lua_block {
                ngx.say("sub pre: ", ngx.ctx.blah)
                ngx.ctx.blah = 32
                ngx.say("sub post: ", ngx.ctx.blah)
            }
        }
        location /app/context/main {
            content_by_lua_block {
                ngx.ctx.blah = 66
                ngx.say("main pre: ", ngx.ctx.blah)
                local res = ngx.location.capture("/app/context/sub")
                ngx.print(res.body)
                ngx.say("main post: ", ngx.ctx.blah)
            }
        }

        # 如何发起新 HTTP 请求
        # https://moonbingbing.gitbooks.io/openresty-best-practices/content/openresty/how_request_http.html
        # https://github.com/ledgetech/lua-resty-http
        # curl http://localhost:6699/app/http?data=111111&key=a5522dc31933a008519c0e68be553783
        # opm get ledgetech/lua-resty-http
        location /app/http {
            content_by_lua_block {
                ngx.req.read_body()
                local args, err = ngx.req.get_uri_args()

                local http = require "resty.http"
                local httpc = http.new()
                local res, err = httpc:request_uri("http://127.0.0.1:6688/api/md5", {
                    method = "POST",
                    body = args.data
                })
                if 200 ~= res.status then
                    ngx.exit(res.status)
                end

                if args.key == res.body then
                    ngx.say("success")
                else 
                    ngx.say("failed")
                end
            }
        }

        # 防止 SQL 注入
        # https://moonbingbing.gitbooks.io/openresty-best-practices/content/openresty/safe_sql.html
        # opm get openresty/lua-resty-mysql
        location /app/mysql {
            content_by_lua_block {
                local mysql = require "resty.mysql"
                local db, err = mysql:new()
                if not db then 
                    ngx.say("failed to instance mysql:", err)
                    return
                end

                db:set_timeout(1000) -- 1 sec

                -- 链接 MySQL 
                local ok, err, errno, sqlstate = db:connect({
                    host = "127.0.0.1",
                    port = 3306,
                    database = "demo",
                    user = "root",
                    password = "tjw199022",
                    max_packet_size = 1024 * 1024
                })

                if not ok then 
                    ngx.say("failed to connect: ", err, ": ", errno, " ", sqlstate)
                    return
                end

                ngx.say("connected to mysql.")

                -- 执行删除库
                local res, err, errno, sqlstate = db:query("drop table if exists cats")
                if not res then 
                    ngx.say("bad result: ", err, ": ", errno, ": ", sqlstate, ".")
                    return
                end 

                -- 执行创建库
                res, err, errno, sqlstate = db:query(
                    "create table cats ("
                    .. "id int(11) unsigned NOT NULL AUTO_INCREMENT,"
                    .. "name varchar(100) DEFAULT NULL,"
                    .. "PRIMARY KEY (`id`)) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;"
                )
                if not res then 
                    ngx.say("bad result: ", err, ": ", errno, ": ", sqlstate, ".")
                    return
                end
                ngx.say("table cats created.")

                -- 执行插入数据
                res, err, errno, sqlstate = db:query("insert into cats(name) "
                        .. "values('Bob'), (''), (null)")
                if not res then 
                    ngx.say("bad result: ", err, ": ", errno, ": ", sqlstate, ".")
                    return
                end 

                ngx.say(res.affected_rows, " rows inserted into table cats", "(first insert id: ", res.insert_id, ")")

                -- 执行查询操作
                -- 对输入参数进行一层过滤 ndk.set_var.set_quote_sql_str
                local req_id = [[1]]

                res, err, errno, sqlstate = db:query(
                    string.format([[select * from cats where id = %s]], ndk.set_var.set_quote_sql_str(req_id))
                )
                if not res then
                    ngx.say("bad result: ", err, ": ", errno, ": ", sqlstate, ".")
                    return
                end

                -- json 返回结果
                local cjson = require "cjson"
                local resp = {
                    code = 200,
                    message = "success",
                    data = res
                }
                ngx.say(cjson.encode(resp))
                
                -- 设置连接池
                db:set_keepalive(10000, 100)
            }
        }

        # LuaRestyRedisLibrary
        # https://moonbingbing.gitbooks.io/openresty-best-practices/content/redis/auth_connect.html
        # opm get openresty/lua-resty-redis
        location /app/redis {
            content_by_lua_file lua/redis.lua;
        }

        # LuaCjsonLibrary
        # https://moonbingbing.gitbooks.io/openresty-best-practices/content/json/parse_exception.html
        location /app/json {
            content_by_lua_file lua/json.lua;
        }

        # LuaNginxModule
        # https://moonbingbing.gitbooks.io/openresty-best-practices/content/ngx_lua/phase.html
        location /mixed {
            set_by_lua_block $a {
                ngx.log(ngx.ERR, "set_by_lua*")
            }
            rewrite_by_lua_block {
                ngx.log(ngx.ERR, "rewrite_by_lua*")
            }
            access_by_lua_block {
                ngx.log(ngx.ERR, "access_by_lua*")
            }
            content_by_lua_block {
                ngx.log(ngx.ERR, "content_by_lua*")
            }
            header_filter_by_lua_block {
                ngx.log(ngx.ERR, "header_filter_by_lua*")
            }
            body_filter_by_lua_block {
                ngx.log(ngx.ERR, "body_filter_by_lua*")
            }
            log_by_lua_block {
                ngx.log(ngx.ERR, "log_by_lua*")
            }
        }
        location /app/lua_ngx {
            content_by_lua_file lua/lua_ngx.lua;
        }
        # 禁止某些终端访问
        # https://moonbingbing.gitbooks.io/openresty-best-practices/content/ngx_lua/allow_deny.html
        location /app/lua_ngx_ip {
            # ip 白名单数据见 init_by_lua_block
            access_by_lua_block {
                local iputils = require("resty.iputils")
                if not iputils.ip_in_cidrs(ngx.var.remote_addr, whitelist) then
                    return ngx.exit(ngx.HTTP_FORBIDDEN)
                end
                ngx.say("access")
            }
        }
        # 动态限速
        # https://moonbingbing.gitbooks.io/openresty-best-practices/content/ngx_lua/lua-limit.html
        location /app/lua_ngx/rate/limit_conn {
            access_by_lua_file lua/rate/access.lua;
            content_by_lua_file lua/rate/content.lua;
            log_by_lua_file lua/rate/log.lua;
        }
        location /app/lua_ngx/rate/limit_req {
            access_by_lua_block {
                local limit_req = require "resty.limit.req"

                local lim, err = limit_req.new("limit_req_store", 1, 1)
                if not lim then
                    ngx.log(ngx.ERR,"failed to instantiate a resty.limit.req object: ", err)
                    return ngx.exit(500)
                end

                -- local key = ngx.var.binary_remote_addr
                local key = ngx.var.remote_addr
                local delay, err = lim:incoming(key, true)

                if not delay then
                    if err == "rejected" then
                        return ngx.exit(503)
                    end
                    ngx.log(ngx.ERR, "failed to limit req: ", err)
                    return ngx.exit(500)
                end

                if delay >= 0.001 then
                    local excess = err
                    ngx.sleep(delay)
                end
            }
            content_by_lua_block {
                ngx.say("success request:" .. ngx.var.remote_addr)
            }
        }
        # 如何引用第三方 resty 库
        # https://moonbingbing.gitbooks.io/openresty-best-practices/content/ngx_lua/how_use_third_lib.html
        location /app/lua_gx/libs {
            resolver 8.8.8.8;  # use Google's open DNS server for an example

            content_by_lua_block {
                local http = require "resty.http"
                local httpc = http.new()
                local res, err = httpc:request_uri("http://www.baidu.com/")

                if not res then
                    ngx.say("failed to request: ", err)
                    return
                end

                if res.status == ngx.HTTP_OK then
                    ngx.header.content_type = "text/html"
                    ngx.say(res.body)
                else
                    ngx.status = res.status
                    ngx.exit("请求失败")
                end
            }
        }
        location /app/lua_gx/cosocket {
            resolver 114.114.114.114;

            content_by_lua_block {
                local sock = ngx.socket.tcp()
                local ok, err = sock:connect("www.baidu.com", 80)
                if not ok then
                    ngx.say("failed to connect to baidu:", err)
                    return
                end

                local req_data = "GET / HTTP/1.1\r\nHost: www.baidu.com\r\n\r\n"
                local bytes, err = sock:send(req_data)
                if err then
                    ngx.say("failed to send to baidu:", err)
                    return
                end

                local data, err, partial = sock:receive()
                if err then
                    ngx.say("failed to receive from baidu:", err)
                    return
                end

                sock:close()
                ngx.say("Successfully talk to baidu! response first line:", data)
            }

        }

    }

    server {
        listen 6688;
        # 模拟跨服务请求的 server
        location /api/md5 {
            content_by_lua_block {
                ngx.req.read_body()
                local data = ngx.req.get_body_data()
                ngx.print(ngx.md5(data .. "*&^%$#$^&kjtrKUYG"))
            }
        }
    }
}